{"version":3,"file":"tmdb-O7QH7REr.js","sources":["../../src/services/tmdb.ts"],"sourcesContent":["const TMDB_API_KEY = '1793e5bf5d2a11bbfd7865ba98302fed';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport interface Actor {\n  id: number;\n  name: string;\n  profile_path: string | null;\n  known_for_department: string;\n  imdb_id?: string;\n  imdb_url?: string;\n}\n\nexport interface Movie {\n  id: number;\n  title: string;\n  release_date: string;\n  poster_path: string | null;\n  vote_count: number;\n  imdb_id?: string;\n  imdb_url?: string;\n}\n\nexport async function searchActor(query: string): Promise<Actor[]> {\n  if (!query.trim()) return [];\n  \n  try {\n    const response = await fetch(\n      `${BASE_URL}/search/person?api_key=${TMDB_API_KEY}&query=${encodeURIComponent(query)}`\n    );\n    if (!response.ok) throw new Error('Failed to fetch actor search results');\n    \n    const data = await response.json();\n    return data.results.filter((actor: Actor) => \n      actor.known_for_department === 'Acting'\n    );\n  } catch (error) {\n    console.error('Actor search error:', error);\n    throw new Error('Failed to search for actor');\n  }\n}\n\nexport async function getActorDetails(actorId: number): Promise<Actor> {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/person/${actorId}?api_key=${TMDB_API_KEY}&append_to_response=external_ids`\n    );\n    if (!response.ok) throw new Error('Failed to fetch actor details');\n    \n    const data = await response.json();\n    return {\n      ...data,\n      imdb_url: data.imdb_id ? `https://www.imdb.com/name/${data.imdb_id}` : null\n    };\n  } catch (error) {\n    console.error('Actor details error:', error);\n    throw new Error('Failed to get actor details');\n  }\n}\n\nexport async function getMovieDetails(movieId: number): Promise<Movie> {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/movie/${movieId}?api_key=${TMDB_API_KEY}&append_to_response=external_ids`\n    );\n    if (!response.ok) throw new Error('Failed to fetch movie details');\n    \n    const data = await response.json();\n    return {\n      ...data,\n      imdb_url: data.imdb_id ? `https://www.imdb.com/title/${data.imdb_id}` : null\n    };\n  } catch (error) {\n    console.error('Movie details error:', error);\n    throw new Error('Failed to get movie details');\n  }\n}\n\nexport async function getActorMovies(actorId: number): Promise<Movie[]> {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/person/${actorId}/movie_credits?api_key=${TMDB_API_KEY}`\n    );\n    if (!response.ok) throw new Error('Failed to fetch actor movies');\n    \n    const data = await response.json();\n    const movies = data.cast;\n    \n    // Get IMDB IDs for all movies\n    const moviesWithImdb = await Promise.all(\n      movies.map(async (movie: Movie) => {\n        const details = await getMovieDetails(movie.id);\n        return {\n          ...movie,\n          imdb_url: details.imdb_url\n        };\n      })\n    );\n    \n    return moviesWithImdb;\n  } catch (error) {\n    console.error('Actor movies error:', error);\n    throw new Error('Failed to get actor movies');\n  }\n}\n\nexport async function getMovieCast(movieId: number): Promise<Actor[]> {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${TMDB_API_KEY}`\n    );\n    if (!response.ok) throw new Error('Failed to fetch movie cast');\n    \n    const data = await response.json();\n    return data.cast;\n  } catch (error) {\n    console.error('Movie cast error:', error);\n    throw new Error('Failed to get movie cast');\n  }\n}"],"names":["TMDB_API_KEY","BASE_URL","searchActor","query","response","actor","error","getActorDetails","actorId","data","getMovieDetails","movieId","getActorMovies","movies","movie","details","getMovieCast"],"mappings":"AAAA,MAAMA,EAAe,mCACfC,EAAW,+BAqBjB,eAAsBC,EAAYC,EAAiC,CACjE,GAAI,CAACA,EAAM,KAAK,QAAU,CAAA,EAEtB,GAAA,CACF,MAAMC,EAAW,MAAM,MACrB,GAAGH,CAAQ,0BAA0BD,CAAY,UAAU,mBAAmBG,CAAK,CAAC,EAAA,EAEtF,GAAI,CAACC,EAAS,GAAU,MAAA,IAAI,MAAM,sCAAsC,EAGxE,OADa,MAAMA,EAAS,QAChB,QAAQ,OAAQC,GAC1BA,EAAM,uBAAyB,QAAA,QAE1BC,EAAO,CACN,cAAA,MAAM,sBAAuBA,CAAK,EACpC,IAAI,MAAM,4BAA4B,CAC9C,CACF,CAEA,eAAsBC,EAAgBC,EAAiC,CACjE,GAAA,CACF,MAAMJ,EAAW,MAAM,MACrB,GAAGH,CAAQ,WAAWO,CAAO,YAAYR,CAAY,kCAAA,EAEvD,GAAI,CAACI,EAAS,GAAU,MAAA,IAAI,MAAM,+BAA+B,EAE3D,MAAAK,EAAO,MAAML,EAAS,OACrB,MAAA,CACL,GAAGK,EACH,SAAUA,EAAK,QAAU,6BAA6BA,EAAK,OAAO,GAAK,IAAA,QAElEH,EAAO,CACN,cAAA,MAAM,uBAAwBA,CAAK,EACrC,IAAI,MAAM,6BAA6B,CAC/C,CACF,CAEA,eAAsBI,EAAgBC,EAAiC,CACjE,GAAA,CACF,MAAMP,EAAW,MAAM,MACrB,GAAGH,CAAQ,UAAUU,CAAO,YAAYX,CAAY,kCAAA,EAEtD,GAAI,CAACI,EAAS,GAAU,MAAA,IAAI,MAAM,+BAA+B,EAE3D,MAAAK,EAAO,MAAML,EAAS,OACrB,MAAA,CACL,GAAGK,EACH,SAAUA,EAAK,QAAU,8BAA8BA,EAAK,OAAO,GAAK,IAAA,QAEnEH,EAAO,CACN,cAAA,MAAM,uBAAwBA,CAAK,EACrC,IAAI,MAAM,6BAA6B,CAC/C,CACF,CAEA,eAAsBM,EAAeJ,EAAmC,CAClE,GAAA,CACF,MAAMJ,EAAW,MAAM,MACrB,GAAGH,CAAQ,WAAWO,CAAO,0BAA0BR,CAAY,EAAA,EAErE,GAAI,CAACI,EAAS,GAAU,MAAA,IAAI,MAAM,8BAA8B,EAGhE,MAAMS,GADO,MAAMT,EAAS,QACR,KAab,OAVgB,MAAM,QAAQ,IACnCS,EAAO,IAAI,MAAOC,GAAiB,CACjC,MAAMC,EAAU,MAAML,EAAgBI,EAAM,EAAE,EACvC,MAAA,CACL,GAAGA,EACH,SAAUC,EAAQ,QAAA,CACpB,CACD,CAAA,QAIIT,EAAO,CACN,cAAA,MAAM,sBAAuBA,CAAK,EACpC,IAAI,MAAM,4BAA4B,CAC9C,CACF,CAEA,eAAsBU,EAAaL,EAAmC,CAChE,GAAA,CACF,MAAMP,EAAW,MAAM,MACrB,GAAGH,CAAQ,UAAUU,CAAO,oBAAoBX,CAAY,EAAA,EAE9D,GAAI,CAACI,EAAS,GAAU,MAAA,IAAI,MAAM,4BAA4B,EAG9D,OADa,MAAMA,EAAS,QAChB,WACLE,EAAO,CACN,cAAA,MAAM,oBAAqBA,CAAK,EAClC,IAAI,MAAM,0BAA0B,CAC5C,CACF"}